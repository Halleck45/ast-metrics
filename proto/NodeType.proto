syntax = "proto3";

package NodeType;
option go_package = "github.com/halleck45/ast-metrics/NodeType";

// ------------------------------------
// -- Node Types and statements
// ------------------------------------
// represents an identifier (name)
message Name {
  string short = 1;
  string qualified = 2; // fully qualified name (with namespace)
  string describer = 3; // internal description of statement (e.g. for function: return type + name + parameters)
  string package = 4; // package name
}

// Represents a list of statements.
message Stmts {
  Analyze analyze = 1;
  // Append here all the possible statements
  repeated StmtClass stmtClass = 2;
  repeated StmtFunction stmtFunction = 3;
  repeated StmtInterface stmtInterface = 4;
  repeated StmtTrait stmtTrait = 5;
  repeated StmtUse stmtUse = 6;
  repeated StmtNamespace stmtNamespace = 7;
  repeated StmtDecisionIf stmtDecisionIf = 8;
  repeated StmtDecisionElseIf stmtDecisionElseIf = 9;
  repeated StmtDecisionElse stmtDecisionElse = 10;
  repeated StmtDecisionCase stmtDecisionCase = 11;
  repeated StmtLoop stmtLoop = 12;
  repeated StmtDecisionSwitch stmtDecisionSwitch = 13;
  repeated StmtExternalDependency stmtExternalDependencies = 14;
}

// Represents a file
message File {
  string path = 1;
  Stmts stmts = 2;
  LinesOfCode linesOfCode = 3;
  string programmingLanguage  = 4;
  Commits commits = 5;
  repeated string errors = 6;
  string checksum = 7;
  string shortPath = 8;
}

// Describe the location of statement in file.
message StmtLocationInFile {
  int32 startLine = 1;
  int32 startFilePos = 2;
  int32 endLine = 3;
  int32 endFilePos = 4;
  int32 blankLines = 5;
}

// Represents a namespace node.
message StmtNamespace {
  Name name = 1;
  Stmts stmts = 2;
  StmtLocationInFile location = 3;
  LinesOfCode linesOfCode = 4;
}

// Represents a Use (or Import) node.
message StmtUse {
  Name name = 1;
  Stmts stmts = 2;
  StmtLocationInFile location = 3;
}

// Represents a Class node.
message StmtClass {
  Name name = 1;
  Stmts stmts = 2;
  StmtLocationInFile location = 3;
  repeated StmtComment comments = 4;
  repeated StmtOperator operators = 5;
  repeated StmtOperand operands = 6;
  repeated Name extends = 7;
  repeated Name implements = 8;
  repeated Name uses = 9;
  LinesOfCode linesOfCode = 10;
}

// Represents a Function node.
message StmtFunction {
  Name name = 1;
  Stmts stmts = 2;
  StmtLocationInFile location = 3;
  repeated StmtComment comments = 4;
  repeated StmtOperator operators = 5;
  repeated StmtOperand operands = 6;
  repeated StmtMethodCall methodCalls = 7;
  repeated StmtParameter parameters = 8;
  repeated Name externals = 9; // dependencies
  LinesOfCode linesOfCode = 10;
}

// Represents a Parameter node (for function)
message StmtParameter {
  string name = 1;
  string type = 2;
}

// Represents a external dependency node. Used when code call new X() or X::method() for example
message StmtExternalDependency {
  string className = 1;
  string functionName = 2;
  string namespace = 3;
  string from = 4;
}

// Represents a Interface node.
message StmtInterface {
  Name name = 1;
  Stmts stmts = 2;
  StmtLocationInFile location = 3;
  repeated Name extends = 4;
}

// Represents a Trait node.
message StmtTrait {
  Name name = 1;
  Stmts stmts = 2;
  StmtLocationInFile location = 3;
}


// Represents a decision (IF)
message StmtDecisionIf {
    Stmts stmts = 1;
    StmtLocationInFile location = 2;
}

// Represents a decision (ELSEIF)
message StmtDecisionElseIf {
    Stmts stmts = 1;
    StmtLocationInFile location = 2;
}


// Represents a decision (ELSE)
message StmtDecisionElse {
    Stmts stmts = 1;
    StmtLocationInFile location = 2;
}

// Represents a decision (CASE)
message StmtDecisionCase {
    Stmts stmts = 1;
    StmtLocationInFile location = 2;
}

// Represents a group of decisions (SWITCH)
message StmtDecisionSwitch {
    Stmts stmts = 1;
    StmtLocationInFile location = 2;
}

// Represents a loop (FOR, FOREACH, WHILE)
message StmtLoop {
    Stmts stmts = 1;
    StmtLocationInFile location = 2;
}

// Represents a comment (multiline or singline)
message StmtComment {
  string text = 1;
  StmtLocationInFile location = 2;
}

// ------------------------------------
// -- Volume: Operators and Operands
// ------------------------------------
message StmtOperator {
  string name = 1;
}
message StmtOperand {
  string name = 1;
}
message StmtMethodCall {
  string name = 1;
}

// ------------------------------------
// -- Volume: LinesOfCode
// ------------------------------------
message LinesOfCode {
  int32 linesOfCode = 1;
  int32 logicalLinesOfCode = 2;
  int32 commentLinesOfCode = 3;
  int32 nonCommentLinesOfCode = 4;
}

// ------------------------------------
// -- Metrics
// ------------------------------------
// Represents The storage of all the metrics
message Analyze {
  Complexity complexity = 1;
  Volume volume = 2;
  Maintainability maintainability = 3;
  Risk risk = 4;
  Coupling coupling = 5;
  ClassCohesion classCohesion = 6;
}
message Complexity {
  optional int32 cyclomatic = 1;
}
message Volume {
  optional int32 loc = 1;
  optional int32 lloc = 2;
  optional int32 cloc = 3;
  optional int32 halsteadVocabulary = 4;
  optional int32 halsteadLength = 5;
  optional double halsteadVolume = 6;
  optional double halsteadDifficulty = 7;
  optional double halsteadEffort = 8;
  optional double halsteadTime = 9;
  optional double halsteadEstimatedLength = 10;
}
message Maintainability {
  optional double maintainabilityIndex = 1;
  optional double maintainabilityIndexWithoutComments = 2;
  optional double commentWeight = 3;
}
message ClassCohesion {
  optional double lcom1 = 1; // Henderson-Sellers algorithm
  optional int32 lcom4 = 2; // Hitz & Montazer (we don't use Basili algorithm => not pertinent)
}

// ------------------------------------
// -- SCM
// ------------------------------------
message Commits {
  int32 count = 1;
  int32 countCommiters = 2;
  repeated Commit commits = 3;
}
message Commit {
  string hash = 1;
  string author = 2;
  int64 date = 3;
}

// ------------------------------------
// -- Risk
// ------------------------------------
message Risk {
  double score = 1; // score of risk. Lower is better
}

// ------------------------------------
// -- Coupling
// ------------------------------------
message Coupling {
  int32 afferent = 1; // number of classes that depends on this class
  int32 efferent = 2; // number of classes that this class depends on
  double instability = 3; // instability of the class
}

// ------------------------------------
// -- Graph of dependencies
// ------------------------------------
// want an Adjacency List/Set Implementation
// @see https://medium.com/outco/how-to-build-a-graph-data-structure-d779d822f9b4
message Graph {
  map<string, Node> nodes = 1; // key is node id
}
message Node {
  string id = 1; // unique id of node
  repeated string edges = 2; // list of node ids this node points to
  Name name = 3; // name of the node
}