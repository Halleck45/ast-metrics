// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: proto/NodeType.proto

package NodeType

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ------------------------------------
// -- Node Types and statements
// ------------------------------------
// represents an identifier (name)
type Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Short     string `protobuf:"bytes,1,opt,name=short,proto3" json:"short,omitempty"`
	Qualified string `protobuf:"bytes,2,opt,name=qualified,proto3" json:"qualified,omitempty"` // fully qualified name (with namespace)
	Describer string `protobuf:"bytes,3,opt,name=describer,proto3" json:"describer,omitempty"` // internal description of statement (e.g. for function: return type + name + parameters)
}

func (x *Name) Reset() {
	*x = Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{0}
}

func (x *Name) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *Name) GetQualified() string {
	if x != nil {
		return x.Qualified
	}
	return ""
}

func (x *Name) GetDescriber() string {
	if x != nil {
		return x.Describer
	}
	return ""
}

// Represents a list of statements.
type Stmts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyze *Analyze `protobuf:"bytes,1,opt,name=analyze,proto3" json:"analyze,omitempty"`
	// Append here all the possible statements
	StmtClass          []*StmtClass          `protobuf:"bytes,2,rep,name=stmtClass,proto3" json:"stmtClass,omitempty"`
	StmtFunction       []*StmtFunction       `protobuf:"bytes,3,rep,name=stmtFunction,proto3" json:"stmtFunction,omitempty"`
	StmtInterface      []*StmtInterface      `protobuf:"bytes,4,rep,name=stmtInterface,proto3" json:"stmtInterface,omitempty"`
	StmtTrait          []*StmtTrait          `protobuf:"bytes,5,rep,name=stmtTrait,proto3" json:"stmtTrait,omitempty"`
	StmtUse            []*StmtUse            `protobuf:"bytes,6,rep,name=stmtUse,proto3" json:"stmtUse,omitempty"`
	StmtNamespace      []*StmtNamespace      `protobuf:"bytes,7,rep,name=stmtNamespace,proto3" json:"stmtNamespace,omitempty"`
	StmtDecisionIf     []*StmtDecisionIf     `protobuf:"bytes,8,rep,name=stmtDecisionIf,proto3" json:"stmtDecisionIf,omitempty"`
	StmtDecisionElseIf []*StmtDecisionElseIf `protobuf:"bytes,9,rep,name=stmtDecisionElseIf,proto3" json:"stmtDecisionElseIf,omitempty"`
	StmtDecisionElse   []*StmtDecisionElse   `protobuf:"bytes,10,rep,name=stmtDecisionElse,proto3" json:"stmtDecisionElse,omitempty"`
	StmtDecisionCase   []*StmtDecisionCase   `protobuf:"bytes,11,rep,name=stmtDecisionCase,proto3" json:"stmtDecisionCase,omitempty"`
	StmtLoop           []*StmtLoop           `protobuf:"bytes,12,rep,name=stmtLoop,proto3" json:"stmtLoop,omitempty"`
}

func (x *Stmts) Reset() {
	*x = Stmts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stmts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stmts) ProtoMessage() {}

func (x *Stmts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stmts.ProtoReflect.Descriptor instead.
func (*Stmts) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{1}
}

func (x *Stmts) GetAnalyze() *Analyze {
	if x != nil {
		return x.Analyze
	}
	return nil
}

func (x *Stmts) GetStmtClass() []*StmtClass {
	if x != nil {
		return x.StmtClass
	}
	return nil
}

func (x *Stmts) GetStmtFunction() []*StmtFunction {
	if x != nil {
		return x.StmtFunction
	}
	return nil
}

func (x *Stmts) GetStmtInterface() []*StmtInterface {
	if x != nil {
		return x.StmtInterface
	}
	return nil
}

func (x *Stmts) GetStmtTrait() []*StmtTrait {
	if x != nil {
		return x.StmtTrait
	}
	return nil
}

func (x *Stmts) GetStmtUse() []*StmtUse {
	if x != nil {
		return x.StmtUse
	}
	return nil
}

func (x *Stmts) GetStmtNamespace() []*StmtNamespace {
	if x != nil {
		return x.StmtNamespace
	}
	return nil
}

func (x *Stmts) GetStmtDecisionIf() []*StmtDecisionIf {
	if x != nil {
		return x.StmtDecisionIf
	}
	return nil
}

func (x *Stmts) GetStmtDecisionElseIf() []*StmtDecisionElseIf {
	if x != nil {
		return x.StmtDecisionElseIf
	}
	return nil
}

func (x *Stmts) GetStmtDecisionElse() []*StmtDecisionElse {
	if x != nil {
		return x.StmtDecisionElse
	}
	return nil
}

func (x *Stmts) GetStmtDecisionCase() []*StmtDecisionCase {
	if x != nil {
		return x.StmtDecisionCase
	}
	return nil
}

func (x *Stmts) GetStmtLoop() []*StmtLoop {
	if x != nil {
		return x.StmtLoop
	}
	return nil
}

// Represents a file
type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Stmts *Stmts `protobuf:"bytes,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{2}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

// Describe the location of statement in file.
type StmtLocationInFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine    int32 `protobuf:"varint,1,opt,name=startLine,proto3" json:"startLine,omitempty"`
	StartFilePos int32 `protobuf:"varint,2,opt,name=startFilePos,proto3" json:"startFilePos,omitempty"`
	EndLine      int32 `protobuf:"varint,3,opt,name=endLine,proto3" json:"endLine,omitempty"`
	EndFilePos   int32 `protobuf:"varint,4,opt,name=endFilePos,proto3" json:"endFilePos,omitempty"`
	BlankLines   int32 `protobuf:"varint,5,opt,name=blankLines,proto3" json:"blankLines,omitempty"`
}

func (x *StmtLocationInFile) Reset() {
	*x = StmtLocationInFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtLocationInFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtLocationInFile) ProtoMessage() {}

func (x *StmtLocationInFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtLocationInFile.ProtoReflect.Descriptor instead.
func (*StmtLocationInFile) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{3}
}

func (x *StmtLocationInFile) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *StmtLocationInFile) GetStartFilePos() int32 {
	if x != nil {
		return x.StartFilePos
	}
	return 0
}

func (x *StmtLocationInFile) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *StmtLocationInFile) GetEndFilePos() int32 {
	if x != nil {
		return x.EndFilePos
	}
	return 0
}

func (x *StmtLocationInFile) GetBlankLines() int32 {
	if x != nil {
		return x.BlankLines
	}
	return 0
}

// Represents a namespace node.
type StmtNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *Name               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stmts    *Stmts              `protobuf:"bytes,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtNamespace) Reset() {
	*x = StmtNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtNamespace) ProtoMessage() {}

func (x *StmtNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtNamespace.ProtoReflect.Descriptor instead.
func (*StmtNamespace) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{4}
}

func (x *StmtNamespace) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StmtNamespace) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtNamespace) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a Use (or Import) node.
type StmtUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *Name               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stmts    *Stmts              `protobuf:"bytes,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtUse) Reset() {
	*x = StmtUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtUse) ProtoMessage() {}

func (x *StmtUse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtUse.ProtoReflect.Descriptor instead.
func (*StmtUse) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{5}
}

func (x *StmtUse) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StmtUse) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtUse) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a Class node.
type StmtClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *Name               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stmts      *Stmts              `protobuf:"bytes,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location   *StmtLocationInFile `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Comments   []*StmtComment      `protobuf:"bytes,4,rep,name=comments,proto3" json:"comments,omitempty"`
	Operators  []*StmtOperator     `protobuf:"bytes,5,rep,name=operators,proto3" json:"operators,omitempty"`
	Operands   []*StmtOperand      `protobuf:"bytes,6,rep,name=operands,proto3" json:"operands,omitempty"`
	Extends    []*Name             `protobuf:"bytes,7,rep,name=extends,proto3" json:"extends,omitempty"`
	Implements []*Name             `protobuf:"bytes,8,rep,name=implements,proto3" json:"implements,omitempty"`
	Uses       []*Name             `protobuf:"bytes,9,rep,name=uses,proto3" json:"uses,omitempty"`
}

func (x *StmtClass) Reset() {
	*x = StmtClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtClass) ProtoMessage() {}

func (x *StmtClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtClass.ProtoReflect.Descriptor instead.
func (*StmtClass) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{6}
}

func (x *StmtClass) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StmtClass) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtClass) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *StmtClass) GetComments() []*StmtComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *StmtClass) GetOperators() []*StmtOperator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *StmtClass) GetOperands() []*StmtOperand {
	if x != nil {
		return x.Operands
	}
	return nil
}

func (x *StmtClass) GetExtends() []*Name {
	if x != nil {
		return x.Extends
	}
	return nil
}

func (x *StmtClass) GetImplements() []*Name {
	if x != nil {
		return x.Implements
	}
	return nil
}

func (x *StmtClass) GetUses() []*Name {
	if x != nil {
		return x.Uses
	}
	return nil
}

// Represents a Function node.
type StmtFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *Name               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stmts      *Stmts              `protobuf:"bytes,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location   *StmtLocationInFile `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Comments   []*StmtComment      `protobuf:"bytes,4,rep,name=comments,proto3" json:"comments,omitempty"`
	Operators  []*StmtOperator     `protobuf:"bytes,5,rep,name=operators,proto3" json:"operators,omitempty"`
	Operands   []*StmtOperand      `protobuf:"bytes,6,rep,name=operands,proto3" json:"operands,omitempty"`
	Parameters []*StmtParameter    `protobuf:"bytes,7,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Externals  []*Name             `protobuf:"bytes,8,rep,name=externals,proto3" json:"externals,omitempty"` // dependencies
}

func (x *StmtFunction) Reset() {
	*x = StmtFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtFunction) ProtoMessage() {}

func (x *StmtFunction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtFunction.ProtoReflect.Descriptor instead.
func (*StmtFunction) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{7}
}

func (x *StmtFunction) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StmtFunction) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtFunction) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *StmtFunction) GetComments() []*StmtComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *StmtFunction) GetOperators() []*StmtOperator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *StmtFunction) GetOperands() []*StmtOperand {
	if x != nil {
		return x.Operands
	}
	return nil
}

func (x *StmtFunction) GetParameters() []*StmtParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *StmtFunction) GetExternals() []*Name {
	if x != nil {
		return x.Externals
	}
	return nil
}

type StmtParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type *Name  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *StmtParameter) Reset() {
	*x = StmtParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtParameter) ProtoMessage() {}

func (x *StmtParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtParameter.ProtoReflect.Descriptor instead.
func (*StmtParameter) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{8}
}

func (x *StmtParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StmtParameter) GetType() *Name {
	if x != nil {
		return x.Type
	}
	return nil
}

// Represents a Interface node.
type StmtInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *Name               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stmts    *Stmts              `protobuf:"bytes,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Extends  []*Name             `protobuf:"bytes,4,rep,name=extends,proto3" json:"extends,omitempty"`
}

func (x *StmtInterface) Reset() {
	*x = StmtInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtInterface) ProtoMessage() {}

func (x *StmtInterface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtInterface.ProtoReflect.Descriptor instead.
func (*StmtInterface) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{9}
}

func (x *StmtInterface) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StmtInterface) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtInterface) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *StmtInterface) GetExtends() []*Name {
	if x != nil {
		return x.Extends
	}
	return nil
}

// Represents a Trait node.
type StmtTrait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *Name               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Stmts    *Stmts              `protobuf:"bytes,2,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtTrait) Reset() {
	*x = StmtTrait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtTrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtTrait) ProtoMessage() {}

func (x *StmtTrait) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtTrait.ProtoReflect.Descriptor instead.
func (*StmtTrait) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{10}
}

func (x *StmtTrait) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StmtTrait) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtTrait) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a decision (IF)
type StmtDecisionIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts    *Stmts              `protobuf:"bytes,1,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtDecisionIf) Reset() {
	*x = StmtDecisionIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtDecisionIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtDecisionIf) ProtoMessage() {}

func (x *StmtDecisionIf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtDecisionIf.ProtoReflect.Descriptor instead.
func (*StmtDecisionIf) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{11}
}

func (x *StmtDecisionIf) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtDecisionIf) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a decision (ELSEIF)
type StmtDecisionElseIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts    *Stmts              `protobuf:"bytes,1,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtDecisionElseIf) Reset() {
	*x = StmtDecisionElseIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtDecisionElseIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtDecisionElseIf) ProtoMessage() {}

func (x *StmtDecisionElseIf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtDecisionElseIf.ProtoReflect.Descriptor instead.
func (*StmtDecisionElseIf) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{12}
}

func (x *StmtDecisionElseIf) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtDecisionElseIf) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a decision (ELSE)
type StmtDecisionElse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts    *Stmts              `protobuf:"bytes,1,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtDecisionElse) Reset() {
	*x = StmtDecisionElse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtDecisionElse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtDecisionElse) ProtoMessage() {}

func (x *StmtDecisionElse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtDecisionElse.ProtoReflect.Descriptor instead.
func (*StmtDecisionElse) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{13}
}

func (x *StmtDecisionElse) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtDecisionElse) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a decision (CASE)
type StmtDecisionCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts    *Stmts              `protobuf:"bytes,1,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtDecisionCase) Reset() {
	*x = StmtDecisionCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtDecisionCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtDecisionCase) ProtoMessage() {}

func (x *StmtDecisionCase) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtDecisionCase.ProtoReflect.Descriptor instead.
func (*StmtDecisionCase) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{14}
}

func (x *StmtDecisionCase) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtDecisionCase) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a loop (FOR, FOREACH, WHILE)
type StmtLoop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmts    *Stmts              `protobuf:"bytes,1,opt,name=stmts,proto3" json:"stmts,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtLoop) Reset() {
	*x = StmtLoop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtLoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtLoop) ProtoMessage() {}

func (x *StmtLoop) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtLoop.ProtoReflect.Descriptor instead.
func (*StmtLoop) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{15}
}

func (x *StmtLoop) GetStmts() *Stmts {
	if x != nil {
		return x.Stmts
	}
	return nil
}

func (x *StmtLoop) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// Represents a comment (multiline or singline)
type StmtComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string              `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Location *StmtLocationInFile `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *StmtComment) Reset() {
	*x = StmtComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtComment) ProtoMessage() {}

func (x *StmtComment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtComment.ProtoReflect.Descriptor instead.
func (*StmtComment) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{16}
}

func (x *StmtComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StmtComment) GetLocation() *StmtLocationInFile {
	if x != nil {
		return x.Location
	}
	return nil
}

// ------------------------------------
// -- Volume: Operators and Operands
// ------------------------------------
type StmtOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StmtOperator) Reset() {
	*x = StmtOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtOperator) ProtoMessage() {}

func (x *StmtOperator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtOperator.ProtoReflect.Descriptor instead.
func (*StmtOperator) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{17}
}

func (x *StmtOperator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StmtOperand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StmtOperand) Reset() {
	*x = StmtOperand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StmtOperand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StmtOperand) ProtoMessage() {}

func (x *StmtOperand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StmtOperand.ProtoReflect.Descriptor instead.
func (*StmtOperand) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{18}
}

func (x *StmtOperand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ------------------------------------
// -- Metrics
// ------------------------------------
// Represents The storage of all the metrics
type Analyze struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Complexity      *Complexity      `protobuf:"bytes,1,opt,name=complexity,proto3" json:"complexity,omitempty"`
	Volume          *Volume          `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Maintainability *Maintainability `protobuf:"bytes,3,opt,name=maintainability,proto3" json:"maintainability,omitempty"`
}

func (x *Analyze) Reset() {
	*x = Analyze{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analyze) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analyze) ProtoMessage() {}

func (x *Analyze) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analyze.ProtoReflect.Descriptor instead.
func (*Analyze) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{19}
}

func (x *Analyze) GetComplexity() *Complexity {
	if x != nil {
		return x.Complexity
	}
	return nil
}

func (x *Analyze) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Analyze) GetMaintainability() *Maintainability {
	if x != nil {
		return x.Maintainability
	}
	return nil
}

type Complexity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cyclomatic *int32 `protobuf:"varint,1,opt,name=cyclomatic,proto3,oneof" json:"cyclomatic,omitempty"`
}

func (x *Complexity) Reset() {
	*x = Complexity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Complexity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Complexity) ProtoMessage() {}

func (x *Complexity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Complexity.ProtoReflect.Descriptor instead.
func (*Complexity) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{20}
}

func (x *Complexity) GetCyclomatic() int32 {
	if x != nil && x.Cyclomatic != nil {
		return *x.Cyclomatic
	}
	return 0
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loc                     *int32   `protobuf:"varint,1,opt,name=loc,proto3,oneof" json:"loc,omitempty"`
	Lloc                    *int32   `protobuf:"varint,2,opt,name=lloc,proto3,oneof" json:"lloc,omitempty"`
	Cloc                    *int32   `protobuf:"varint,3,opt,name=cloc,proto3,oneof" json:"cloc,omitempty"`
	HalsteadVocabulary      *int32   `protobuf:"varint,4,opt,name=halsteadVocabulary,proto3,oneof" json:"halsteadVocabulary,omitempty"`
	HalsteadLength          *int32   `protobuf:"varint,5,opt,name=halsteadLength,proto3,oneof" json:"halsteadLength,omitempty"`
	HalsteadVolume          *float32 `protobuf:"fixed32,6,opt,name=halsteadVolume,proto3,oneof" json:"halsteadVolume,omitempty"`
	HalsteadDifficulty      *float32 `protobuf:"fixed32,7,opt,name=halsteadDifficulty,proto3,oneof" json:"halsteadDifficulty,omitempty"`
	HalsteadEffort          *float32 `protobuf:"fixed32,8,opt,name=halsteadEffort,proto3,oneof" json:"halsteadEffort,omitempty"`
	HalsteadTime            *float32 `protobuf:"fixed32,9,opt,name=halsteadTime,proto3,oneof" json:"halsteadTime,omitempty"`
	HalsteadEstimatedLength *float32 `protobuf:"fixed32,10,opt,name=halsteadEstimatedLength,proto3,oneof" json:"halsteadEstimatedLength,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{21}
}

func (x *Volume) GetLoc() int32 {
	if x != nil && x.Loc != nil {
		return *x.Loc
	}
	return 0
}

func (x *Volume) GetLloc() int32 {
	if x != nil && x.Lloc != nil {
		return *x.Lloc
	}
	return 0
}

func (x *Volume) GetCloc() int32 {
	if x != nil && x.Cloc != nil {
		return *x.Cloc
	}
	return 0
}

func (x *Volume) GetHalsteadVocabulary() int32 {
	if x != nil && x.HalsteadVocabulary != nil {
		return *x.HalsteadVocabulary
	}
	return 0
}

func (x *Volume) GetHalsteadLength() int32 {
	if x != nil && x.HalsteadLength != nil {
		return *x.HalsteadLength
	}
	return 0
}

func (x *Volume) GetHalsteadVolume() float32 {
	if x != nil && x.HalsteadVolume != nil {
		return *x.HalsteadVolume
	}
	return 0
}

func (x *Volume) GetHalsteadDifficulty() float32 {
	if x != nil && x.HalsteadDifficulty != nil {
		return *x.HalsteadDifficulty
	}
	return 0
}

func (x *Volume) GetHalsteadEffort() float32 {
	if x != nil && x.HalsteadEffort != nil {
		return *x.HalsteadEffort
	}
	return 0
}

func (x *Volume) GetHalsteadTime() float32 {
	if x != nil && x.HalsteadTime != nil {
		return *x.HalsteadTime
	}
	return 0
}

func (x *Volume) GetHalsteadEstimatedLength() float32 {
	if x != nil && x.HalsteadEstimatedLength != nil {
		return *x.HalsteadEstimatedLength
	}
	return 0
}

type Maintainability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaintainabilityIndex                *float32 `protobuf:"fixed32,1,opt,name=maintainabilityIndex,proto3,oneof" json:"maintainabilityIndex,omitempty"`
	MaintainabilityIndexWithoutComments *float32 `protobuf:"fixed32,2,opt,name=maintainabilityIndexWithoutComments,proto3,oneof" json:"maintainabilityIndexWithoutComments,omitempty"`
	CommentWeight                       *float32 `protobuf:"fixed32,3,opt,name=commentWeight,proto3,oneof" json:"commentWeight,omitempty"`
}

func (x *Maintainability) Reset() {
	*x = Maintainability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_NodeType_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintainability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintainability) ProtoMessage() {}

func (x *Maintainability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_NodeType_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintainability.ProtoReflect.Descriptor instead.
func (*Maintainability) Descriptor() ([]byte, []int) {
	return file_proto_NodeType_proto_rawDescGZIP(), []int{22}
}

func (x *Maintainability) GetMaintainabilityIndex() float32 {
	if x != nil && x.MaintainabilityIndex != nil {
		return *x.MaintainabilityIndex
	}
	return 0
}

func (x *Maintainability) GetMaintainabilityIndexWithoutComments() float32 {
	if x != nil && x.MaintainabilityIndexWithoutComments != nil {
		return *x.MaintainabilityIndexWithoutComments
	}
	return 0
}

func (x *Maintainability) GetCommentWeight() float32 {
	if x != nil && x.CommentWeight != nil {
		return *x.CommentWeight
	}
	return 0
}

var File_proto_NodeType_proto protoreflect.FileDescriptor

var file_proto_NodeType_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x58, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x22, 0xd1, 0x05, 0x0a, 0x05, 0x53,
	0x74, 0x6d, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x07, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x74, 0x6d, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x53, 0x74, 0x6d, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x09, 0x73, 0x74, 0x6d, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x6d, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x6d, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x6d, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0d, 0x73, 0x74, 0x6d, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x73, 0x74, 0x6d, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x6d, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x52, 0x09, 0x73, 0x74, 0x6d, 0x74, 0x54, 0x72, 0x61,
	0x69, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x74, 0x6d, 0x74, 0x55, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x74, 0x6d, 0x74, 0x55, 0x73, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6d, 0x74, 0x55, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x6d, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x0d, 0x73, 0x74, 0x6d, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40,
	0x0a, 0x0e, 0x73, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x66,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x66,
	0x52, 0x0e, 0x73, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x66,
	0x12, 0x4c, 0x0a, 0x12, 0x73, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x52, 0x12, 0x73, 0x74, 0x6d, 0x74,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x12, 0x46,
	0x0a, 0x10, 0x73, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c,
	0x73, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x73, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x74, 0x6d, 0x74, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x52, 0x10, 0x73, 0x74,
	0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74,
	0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x22, 0x41,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74,
	0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74,
	0x73, 0x22, 0xb0, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6d, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74,
	0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x07,
	0x53, 0x74, 0x6d, 0x74, 0x55, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73,
	0x74, 0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x6d,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x03, 0x0a,
	0x09, 0x53, 0x74, 0x6d, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x0c, 0x53, 0x74,
	0x6d, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x74, 0x6d, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0d,
	0x53, 0x74, 0x6d, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x90, 0x01, 0x0a,
	0x09, 0x53, 0x74, 0x6d, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x71, 0x0a, 0x0e, 0x53, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x66, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x12, 0x53, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x10, 0x53, 0x74, 0x6d,
	0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73,
	0x0a, 0x10, 0x53, 0x74, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x08, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x12,
	0x25, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5b, 0x0a, 0x0b, 0x53, 0x74, 0x6d, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x74, 0x6d, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a,
	0x0c, 0x53, 0x74, 0x6d, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x21, 0x0a, 0x0b, 0x53, 0x74, 0x6d, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x07, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x40, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x22, 0xd8, 0x04, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x6c, 0x6f,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x6c, 0x6f, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6c, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x04, 0x63, 0x6c, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x68,
	0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x12, 0x68, 0x61, 0x6c, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0e, 0x68, 0x61, 0x6c, 0x73,
	0x74, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0e, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x68, 0x61,
	0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x12, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65,
	0x61, 0x64, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x45, 0x66, 0x66, 0x6f, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0e, 0x68, 0x61, 0x6c, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61,
	0x64, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x17, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65,
	0x61, 0x64, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x63, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65,
	0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x61, 0x6c,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x64, 0x45,
	0x66, 0x66, 0x6f, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x61, 0x6c, 0x73, 0x74, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x68, 0x61, 0x6c, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x9f, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x55, 0x0a, 0x23, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x23,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x63, 0x6b, 0x34, 0x35, 0x2f, 0x61, 0x73, 0x74,
	0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_NodeType_proto_rawDescOnce sync.Once
	file_proto_NodeType_proto_rawDescData = file_proto_NodeType_proto_rawDesc
)

func file_proto_NodeType_proto_rawDescGZIP() []byte {
	file_proto_NodeType_proto_rawDescOnce.Do(func() {
		file_proto_NodeType_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_NodeType_proto_rawDescData)
	})
	return file_proto_NodeType_proto_rawDescData
}

var file_proto_NodeType_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_NodeType_proto_goTypes = []interface{}{
	(*Name)(nil),               // 0: NodeType.Name
	(*Stmts)(nil),              // 1: NodeType.Stmts
	(*File)(nil),               // 2: NodeType.File
	(*StmtLocationInFile)(nil), // 3: NodeType.StmtLocationInFile
	(*StmtNamespace)(nil),      // 4: NodeType.StmtNamespace
	(*StmtUse)(nil),            // 5: NodeType.StmtUse
	(*StmtClass)(nil),          // 6: NodeType.StmtClass
	(*StmtFunction)(nil),       // 7: NodeType.StmtFunction
	(*StmtParameter)(nil),      // 8: NodeType.StmtParameter
	(*StmtInterface)(nil),      // 9: NodeType.StmtInterface
	(*StmtTrait)(nil),          // 10: NodeType.StmtTrait
	(*StmtDecisionIf)(nil),     // 11: NodeType.StmtDecisionIf
	(*StmtDecisionElseIf)(nil), // 12: NodeType.StmtDecisionElseIf
	(*StmtDecisionElse)(nil),   // 13: NodeType.StmtDecisionElse
	(*StmtDecisionCase)(nil),   // 14: NodeType.StmtDecisionCase
	(*StmtLoop)(nil),           // 15: NodeType.StmtLoop
	(*StmtComment)(nil),        // 16: NodeType.StmtComment
	(*StmtOperator)(nil),       // 17: NodeType.StmtOperator
	(*StmtOperand)(nil),        // 18: NodeType.StmtOperand
	(*Analyze)(nil),            // 19: NodeType.Analyze
	(*Complexity)(nil),         // 20: NodeType.Complexity
	(*Volume)(nil),             // 21: NodeType.Volume
	(*Maintainability)(nil),    // 22: NodeType.Maintainability
}
var file_proto_NodeType_proto_depIdxs = []int32{
	19, // 0: NodeType.Stmts.analyze:type_name -> NodeType.Analyze
	6,  // 1: NodeType.Stmts.stmtClass:type_name -> NodeType.StmtClass
	7,  // 2: NodeType.Stmts.stmtFunction:type_name -> NodeType.StmtFunction
	9,  // 3: NodeType.Stmts.stmtInterface:type_name -> NodeType.StmtInterface
	10, // 4: NodeType.Stmts.stmtTrait:type_name -> NodeType.StmtTrait
	5,  // 5: NodeType.Stmts.stmtUse:type_name -> NodeType.StmtUse
	4,  // 6: NodeType.Stmts.stmtNamespace:type_name -> NodeType.StmtNamespace
	11, // 7: NodeType.Stmts.stmtDecisionIf:type_name -> NodeType.StmtDecisionIf
	12, // 8: NodeType.Stmts.stmtDecisionElseIf:type_name -> NodeType.StmtDecisionElseIf
	13, // 9: NodeType.Stmts.stmtDecisionElse:type_name -> NodeType.StmtDecisionElse
	14, // 10: NodeType.Stmts.stmtDecisionCase:type_name -> NodeType.StmtDecisionCase
	15, // 11: NodeType.Stmts.stmtLoop:type_name -> NodeType.StmtLoop
	1,  // 12: NodeType.File.stmts:type_name -> NodeType.Stmts
	0,  // 13: NodeType.StmtNamespace.name:type_name -> NodeType.Name
	1,  // 14: NodeType.StmtNamespace.stmts:type_name -> NodeType.Stmts
	3,  // 15: NodeType.StmtNamespace.location:type_name -> NodeType.StmtLocationInFile
	0,  // 16: NodeType.StmtUse.name:type_name -> NodeType.Name
	1,  // 17: NodeType.StmtUse.stmts:type_name -> NodeType.Stmts
	3,  // 18: NodeType.StmtUse.location:type_name -> NodeType.StmtLocationInFile
	0,  // 19: NodeType.StmtClass.name:type_name -> NodeType.Name
	1,  // 20: NodeType.StmtClass.stmts:type_name -> NodeType.Stmts
	3,  // 21: NodeType.StmtClass.location:type_name -> NodeType.StmtLocationInFile
	16, // 22: NodeType.StmtClass.comments:type_name -> NodeType.StmtComment
	17, // 23: NodeType.StmtClass.operators:type_name -> NodeType.StmtOperator
	18, // 24: NodeType.StmtClass.operands:type_name -> NodeType.StmtOperand
	0,  // 25: NodeType.StmtClass.extends:type_name -> NodeType.Name
	0,  // 26: NodeType.StmtClass.implements:type_name -> NodeType.Name
	0,  // 27: NodeType.StmtClass.uses:type_name -> NodeType.Name
	0,  // 28: NodeType.StmtFunction.name:type_name -> NodeType.Name
	1,  // 29: NodeType.StmtFunction.stmts:type_name -> NodeType.Stmts
	3,  // 30: NodeType.StmtFunction.location:type_name -> NodeType.StmtLocationInFile
	16, // 31: NodeType.StmtFunction.comments:type_name -> NodeType.StmtComment
	17, // 32: NodeType.StmtFunction.operators:type_name -> NodeType.StmtOperator
	18, // 33: NodeType.StmtFunction.operands:type_name -> NodeType.StmtOperand
	8,  // 34: NodeType.StmtFunction.parameters:type_name -> NodeType.StmtParameter
	0,  // 35: NodeType.StmtFunction.externals:type_name -> NodeType.Name
	0,  // 36: NodeType.StmtParameter.type:type_name -> NodeType.Name
	0,  // 37: NodeType.StmtInterface.name:type_name -> NodeType.Name
	1,  // 38: NodeType.StmtInterface.stmts:type_name -> NodeType.Stmts
	3,  // 39: NodeType.StmtInterface.location:type_name -> NodeType.StmtLocationInFile
	0,  // 40: NodeType.StmtInterface.extends:type_name -> NodeType.Name
	0,  // 41: NodeType.StmtTrait.name:type_name -> NodeType.Name
	1,  // 42: NodeType.StmtTrait.stmts:type_name -> NodeType.Stmts
	3,  // 43: NodeType.StmtTrait.location:type_name -> NodeType.StmtLocationInFile
	1,  // 44: NodeType.StmtDecisionIf.stmts:type_name -> NodeType.Stmts
	3,  // 45: NodeType.StmtDecisionIf.location:type_name -> NodeType.StmtLocationInFile
	1,  // 46: NodeType.StmtDecisionElseIf.stmts:type_name -> NodeType.Stmts
	3,  // 47: NodeType.StmtDecisionElseIf.location:type_name -> NodeType.StmtLocationInFile
	1,  // 48: NodeType.StmtDecisionElse.stmts:type_name -> NodeType.Stmts
	3,  // 49: NodeType.StmtDecisionElse.location:type_name -> NodeType.StmtLocationInFile
	1,  // 50: NodeType.StmtDecisionCase.stmts:type_name -> NodeType.Stmts
	3,  // 51: NodeType.StmtDecisionCase.location:type_name -> NodeType.StmtLocationInFile
	1,  // 52: NodeType.StmtLoop.stmts:type_name -> NodeType.Stmts
	3,  // 53: NodeType.StmtLoop.location:type_name -> NodeType.StmtLocationInFile
	3,  // 54: NodeType.StmtComment.location:type_name -> NodeType.StmtLocationInFile
	20, // 55: NodeType.Analyze.complexity:type_name -> NodeType.Complexity
	21, // 56: NodeType.Analyze.volume:type_name -> NodeType.Volume
	22, // 57: NodeType.Analyze.maintainability:type_name -> NodeType.Maintainability
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_proto_NodeType_proto_init() }
func file_proto_NodeType_proto_init() {
	if File_proto_NodeType_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_NodeType_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stmts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtLocationInFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtTrait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtDecisionIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtDecisionElseIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtDecisionElse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtDecisionCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtLoop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StmtOperand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analyze); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Complexity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_NodeType_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintainability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_NodeType_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_proto_NodeType_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_proto_NodeType_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_NodeType_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_NodeType_proto_goTypes,
		DependencyIndexes: file_proto_NodeType_proto_depIdxs,
		MessageInfos:      file_proto_NodeType_proto_msgTypes,
	}.Build()
	File_proto_NodeType_proto = out.File
	file_proto_NodeType_proto_rawDesc = nil
	file_proto_NodeType_proto_goTypes = nil
	file_proto_NodeType_proto_depIdxs = nil
}
